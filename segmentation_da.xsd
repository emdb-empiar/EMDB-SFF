<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
    targetNamespace="http://pdbe.org/empiarSFF" xmlns="http://pdbe.org/empiarSFF">
    <xs:element name="segmentation">
        <xs:annotation>
            <xs:documentation>Link to assembly or component id.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="name" type="xs:string"/>
                <xs:element minOccurs="0" name="software" type="softwareType"/>
                <xs:element name="voxelTransform" type="transformationMatrix"/>
                <xs:element name="filePath" type="xs:string"/>
                <xs:element name="segmentList">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element maxOccurs="unbounded" name="segment" type="segmentType"/>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element minOccurs="0" name="details" type="xs:string"/>
            </xs:sequence>
            <xs:attribute fixed="0.3" name="schemaVersion" type="xs:token">
                <xs:annotation>
                    <xs:documentation>Version History
0.2, 2015/3/15, Ardan Patwardhan:
1) Added support for color
2) Added support for triangle representation of segment - this is in support of Amira segmentations

0.3, 2015/10/21, Paul Korir:
1) Added voxelTransform
2) Added filePath for segmentLinks to HDF5 (Segger) segmentations
3) Added segmentObjects with contours and meshes for IMOD
					</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="segmentType">
        <xs:sequence>
            <xs:element name="biologicalAnnotation" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="description"/>
                        <xs:element maxOccurs="unbounded" minOccurs="0" name="externalReferences">
                            <xs:annotation>
                                <xs:documentation/>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:simpleContent>
                                    <xs:extension base="xs:token">
                                        <xs:attribute name="type" use="required">
                                            <xs:simpleType>
                                                <xs:restriction base="xs:token">
                                                  <xs:enumeration value="uniprotkb"/>
                                                  <xs:enumeration value="uniparc"/>
                                                  <xs:whiteSpace value="collapse"/>
                                                  <xs:enumeration value="interpro"/>
                                                  <xs:enumeration value="go"/>
                                                </xs:restriction>
                                            </xs:simpleType>
                                        </xs:attribute>
                                    </xs:extension>
                                </xs:simpleContent>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="numberOfCopies" type="xs:positiveInteger" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Number of copies of the basic structure (complex or macromolecule). For example it could be '7' for the upper ring of GroEL</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="complexesAndMacromolecules" type="macromoleculesAndComplexesType"
                minOccurs="0">
                <xs:annotation>
                    <xs:documentation>EMDB internal use</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="color" type="colorType"/>
            <xs:choice>
                <xs:element name="runLengthEncoding" type="runLengthEncodingType"/>
                <xs:element name="segmentLink">
                    <xs:annotation>
                        <xs:documentation>Are the CCP4 format masks going to be allowed? If so, we could represent the information of the mask (mapType) here.</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="file" type="xs:token"/>
                            <xs:element minOccurs="0" name="objectPath" type="xs:token">
                                <xs:annotation>
                                    <xs:documentation>This is particularly relevant if all the segments are stored in one file, like in HDF5</xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element minOccurs="0" name="contourLevel" type="xs:float">
                                <xs:annotation>
                                    <xs:documentation>Should be specified if map is non-binary</xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="shapePrimitive">
                    <xs:complexType>
                        <xs:choice>
                            <xs:element name="cuboid">
                                <xs:annotation>
                                    <xs:documentation>3D rectangle</xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="origin">
                                            <xs:complexType>
                                                <xs:sequence>
                                                  <xs:element name="x"/>
                                                  <xs:element name="y"/>
                                                  <xs:element name="z"/>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                        <xs:element name="dimensions">
                                            <xs:complexType>
                                                <xs:sequence>
                                                  <xs:element name="x"/>
                                                  <xs:element name="y"/>
                                                  <xs:element name="z"/>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                        <xs:element name="viewVectorRotation">
                                            <xs:complexType>
                                                <xs:sequence>
                                                  <xs:element name="x"/>
                                                  <xs:element name="y"/>
                                                  <xs:element name="z"/>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="ellipsoid">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="origin">
                                            <xs:complexType>
                                                <xs:sequence>
                                                  <xs:element name="x"/>
                                                  <xs:element name="y"/>
                                                  <xs:element name="z"/>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                        <xs:element name="axes">
                                            <xs:complexType>
                                                <xs:sequence>
                                                  <xs:element name="x"/>
                                                  <xs:element name="y"/>
                                                  <xs:element name="z"/>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                        <xs:element name="viewVectorRotation">
                                            <xs:complexType>
                                                <xs:sequence>
                                                  <xs:element name="x"/>
                                                  <xs:element name="y"/>
                                                  <xs:element name="z"/>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="cylinder">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="origin">
                                            <xs:complexType>
                                                <xs:sequence>
                                                  <xs:element name="x"/>
                                                  <xs:element name="y"/>
                                                  <xs:element name="z"/>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                        <xs:element name="dimensions">
                                            <xs:complexType>
                                                <xs:sequence>
                                                  <xs:element name="height"/>
                                                  <xs:element name="diameter"/>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                        <xs:element name="viewVectorRotation">
                                            <xs:complexType>
                                                <xs:sequence>
                                                  <xs:element name="x"/>
                                                  <xs:element name="y"/>
                                                  <xs:element name="z"/>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="pyramid"/>
                        </xs:choice>
                    </xs:complexType>
                </xs:element>
                <xs:element name="triangulatedSurface" type="triangulatedSurfaceType"/>
                <xs:element name="segmentObject" minOccurs="1" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>IMOD models store segmentations as contours with optional
                            meshes. This is a rudimentary implementation excluding other parameters
                            (flags, time and surf).
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="contour" minOccurs="1" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="point" type="floatVectorType"
                                            maxOccurs="unbounded"/>
                                    </xs:sequence>
                                    <xs:attribute name="id" type="xs:nonNegativeInteger"/>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="mesh" minOccurs="0" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="meshPoint" type="meshPointType"
                                            maxOccurs="unbounded"/>
                                    </xs:sequence>
                                    <xs:attribute name="id" type="xs:nonNegativeInteger"/>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="id" type="xs:positiveInteger" use="required"/>
        <xs:attribute name="parentID" type="xs:nonNegativeInteger" use="required">
            <xs:annotation>
                <xs:documentation>For the root segment: parentSegmentID = 0</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="macromoleculesAndComplexesType">
        <xs:annotation>
            <xs:documentation>Depending on the problem, one can either reference the sample on the macromolecule level or the complex level. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="macromolecule" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="id" type="xs:positiveInteger" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="complex" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="id" type="xs:positiveInteger" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="runLengthEncodingType">
        <xs:sequence>
            <xs:element name="string">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:pattern value="\d+(,\d+)+"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="offset" type="integerVectorType">
                <xs:annotation>
                    <xs:documentation>Offset of the segment relative to the orign map.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="boxSize" type="positiveIntegerVectorType"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="integerVectorType">
        <xs:sequence>
            <xs:element name="x" type="xs:integer"/>
            <xs:element name="y" type="xs:integer"/>
            <xs:element name="z" type="xs:integer"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="positiveIntegerVectorType">
        <xs:sequence>
            <xs:element name="x" type="xs:positiveInteger"/>
            <xs:element name="y" type="xs:positiveInteger"/>
            <xs:element name="y" type="xs:positiveInteger"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="softwareType">
        <xs:sequence>
            <xs:element name="name" type="xs:token"/>
            <xs:element minOccurs="0" name="version" type="xs:token"/>
            <xs:element minOccurs="0" name="processingDetails" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="vertexType">
        <xs:sequence>
            <xs:element name="x" type="xs:float"/>
            <xs:element name="y" type="xs:float"/>
            <xs:element name="z" type="xs:float"/>
        </xs:sequence>
        <xs:attribute name="vertexID" type="xs:positiveInteger"/>
    </xs:complexType>
    <xs:complexType name="vertexListType">
        <xs:sequence maxOccurs="unbounded" minOccurs="0">
            <xs:element name="vertex" type="vertexType"/>
        </xs:sequence>
        <xs:attribute name="numVertices" type="xs:nonNegativeInteger"/>
    </xs:complexType>
    <xs:complexType name="triangleType">
        <xs:sequence>
            <xs:element name="vertex1" type="xs:positiveInteger"/>
            <xs:element name="vertex2" type="xs:positiveInteger"/>
            <xs:element name="vertex3" type="xs:positiveInteger"/>
        </xs:sequence>
        <xs:attribute name="triangleID" type="xs:positiveInteger"/>
    </xs:complexType>
    <xs:complexType name="triangleListType">
        <xs:sequence maxOccurs="unbounded" minOccurs="0">
            <xs:element name="triangle" type="triangleType"/>
        </xs:sequence>
        <xs:attribute name="numTriangles" type="xs:nonNegativeInteger"/>
    </xs:complexType>
    <xs:complexType name="triangulatedSurfaceType">
        <xs:sequence>
            <xs:element name="vertices" type="vertexListType"/>
            <xs:element name="triangles" type="triangleListType"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="rgbType">
        <xs:sequence>
            <xs:element name="red" type="xs:float"/>
            <xs:element name="green" type="xs:float"/>
            <xs:element name="blue" type="xs:float"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="hsvType">
        <xs:sequence>
            <xs:element name="hue" type="xs:float"/>
            <xs:element name="saturation" type="xs:float"/>
            <xs:element name="value" type="xs:float"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="colorType">
        <xs:sequence>
            <xs:element minOccurs="0" name="rgb" type="rgbType"/>
            <xs:element minOccurs="0" name="hsv" type="hsvType"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:token" use="optional"/>
    </xs:complexType>
    <xs:complexType name="transformationMatrix">
        <xs:annotation>
            <xs:documentation>data is a space-separated sequence of numbers to be converted to
                floats. The number of items in 'data' is equivalent to the product of 'rows' and
                'cols'.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="rows" type="xs:positiveInteger"/>
            <xs:element name="cols" type="xs:positiveInteger"/>
            <xs:element name="data" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="meshPointType">
        <xs:annotation>
            <xs:documentation>A mesh is a sequence of triangles</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="point" type="floatVectorType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="index" type="xs:nonNegativeInteger"/>
        <xs:attribute name="designation">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="vertex"/>
                    <xs:enumeration value="normal"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="floatVectorType">
        <xs:attribute name="x" type="xs:float"/>
        <xs:attribute name="y" type="xs:float"/>
        <xs:attribute name="z" type="xs:float"/>
    </xs:complexType>
</xs:schema>
